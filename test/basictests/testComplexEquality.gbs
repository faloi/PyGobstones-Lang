#!assert
#!board=boards/empty.gbb

#
# Test equality on lists
#

function testEqualityLists() {
	passed := True
	prev := [1, 1]
	foreach rMin in [1, 4, 10, 13, 20] {
		foreach rMax in [20, 33..101] {
			foreach rStep in [1,2,3,4,5,10,11,13] {
				xs := rangeS(rMin, rMax, rStep)
				passed.Assert(xs == rangeS(rMin, rMax, rStep))
				prev := prev ++ [0]				
				passed.Assert(xs /= prev)
				prev := xs  
			}
		}
	}	
	return(passed)
}


#
# Test equality on records
#

type Tuple is record {
	field first
	field second
}

function mkTuple(first, second) {
	return(Tuple(first <- first, second <- second))
}

function testEqRecs() {
	prev := mkTuple(0, Este)
	passed := True
	foreach n in [1,7..101] {		
		foreach d in [minDir()..maxDir()] {			
			tp1 := mkTuple(n, d)
			passed.Assert(tp1 == mkTuple(n, d))			
			prev.first := first(prev) + 100
			passed.Assert(tp1 /= prev)						
			prev := tp1
		}		 
	}
	return(passed)
}

#
# Records with same field but different type shouldn't be equal!
#

type TupleT is record {
	field first
	field second
}

function mkTupleT(first, second) {
	return(TupleT(first <- first, second <- second))
}

function testSameFieldRecs() {
	passed := True
	foreach n in [1,7..101] {		
		foreach d in [minDir()..maxDir()] {						
			passed.Deny(mkTupleT(n, d) == mkTuple(n, d))										
		}		 
	}
	return(passed)
}

t.program {
	passed := True		
	passed.Assert(testSameFieldRecs())
	passed.Assert(testEqualityLists())	
	passed.Assert(testEqRecs())	
	return(passed)
}
